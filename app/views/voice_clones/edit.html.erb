<div class="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
  <%= render 'shared/app_navigation', league_membership: @league_membership, page_title: 'Update Voice Sample' %>

  <!-- Flash Messages -->
  <% if flash.any? %>
    <div class="px-6 py-4">
      <div class="max-w-4xl mx-auto">
        <% flash.each do |type, message| %>
          <% flash_class = type == 'notice' ? 'bg-green-500/20 border-green-500/50 text-green-400' : 'bg-red-500/20 border-red-500/50 text-red-400' %>
          <div class="<%= flash_class %> border rounded-lg p-4 mb-4">
            <%= message %>
          </div>
        <% end %>
      </div>
    </div>
  <% end %>

  <!-- Main Content -->
  <div class="px-6 py-8">
    <div class="max-w-4xl mx-auto">
      
      <!-- Header -->
      <div class="mb-8">
        <h2 class="text-3xl font-bold text-white mb-2">Update Voice Sample</h2>
        <p class="text-gray-400 mb-4">Upload a new voice sample for <strong class="text-white"><%= @league_membership.display_name %></strong> to improve AI press conferences.</p>
        
        <!-- Current Status -->
        <% if @voice_clone.persisted? %>
          <div class="bg-orange-500/10 border border-orange-500/30 rounded-lg p-4 mb-4">
            <h3 class="text-orange-400 font-semibold mb-2">‚ö†Ô∏è Updating Voice Sample</h3>
            <p class="text-orange-300 text-sm">
              Uploading a new voice sample will replace the current one and require reprocessing. 
              Any existing AI voice model will be updated with the new sample.
            </p>
          </div>
        <% end %>
        
        <!-- Requirements -->
        <div class="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
          <h3 class="text-blue-400 font-semibold mb-2">üìã Requirements</h3>
          <ul class="text-blue-300 text-sm space-y-1">
            <li>‚Ä¢ File formats: MP3, WAV, M4A, WebM</li>
            <li>‚Ä¢ File size: 1MB - 50MB</li>
            <li>‚Ä¢ Duration: 30 seconds - 10 minutes recommended</li>
            <li>‚Ä¢ Clear speech with minimal background noise</li>
          </ul>
        </div>
      </div>

      <!-- Current Voice Sample -->
      <% if @voice_clone.audio_file.attached? %>
        <div class="bg-gray-800/50 rounded-xl border border-gray-700 p-6 mb-6">
          <h3 class="text-xl font-semibold text-white mb-4">Current Voice Sample</h3>
          <div class="bg-gray-700/50 rounded-lg p-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-3">
                <div class="text-2xl">üéµ</div>
                <div>
                  <p class="text-white font-medium"><%= @voice_clone.audio_file.filename %></p>
                  <p class="text-gray-400 text-sm">
                    <%= number_to_human_size(@voice_clone.audio_file.byte_size) %> ‚Ä¢ 
                    Status: <span class="<%= @voice_clone.ready? ? 'text-green-400' : 'text-yellow-400' %>">
                      <%= @voice_clone.status.titleize %>
                    </span>
                  </p>
                </div>
              </div>
              
              <!-- Audio Player -->
              <div class="flex items-center space-x-2">
                <audio controls class="h-8">
                  <source src="<%= polymorphic_url(@voice_clone.audio_file) %>" type="<%= @voice_clone.audio_file.content_type %>">
                  Your browser does not support the audio element.
                </audio>
              </div>
            </div>
          </div>
        </div>
      <% end %>

      <!-- Voice Upload Form -->
      <div class="bg-gray-800/50 rounded-xl border border-gray-700 p-6">
        <%= form_with model: [@league_membership.league, @league_membership, @voice_clone], 
                      html: { multipart: true, class: "space-y-6", id: "voice-upload-form" } do |form| %>
          
          <!-- Upload Options -->
          <div class="space-y-4">
            <h3 class="text-xl font-semibold text-white mb-4">Choose Upload Method</h3>
            
            <!-- Tab Navigation -->
            <div class="flex space-x-1 bg-gray-700/50 p-1 rounded-lg w-fit">
              <button type="button" id="file-upload-tab" class="tab-button active px-4 py-2 text-sm font-medium rounded-md transition-colors">
                üìÅ Upload File
              </button>
              <button type="button" id="record-audio-tab" class="tab-button px-4 py-2 text-sm font-medium rounded-md transition-colors">
                üéôÔ∏è Record Audio
              </button>
            </div>

            <!-- File Upload Section -->
            <div id="file-upload-section" class="upload-section">
              <div class="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center hover:border-gray-500 transition-colors" id="file-drop-zone">
                <div class="space-y-4">
                  <div class="text-4xl">üìÅ</div>
                  <div>
                    <p class="text-lg text-white font-medium">Drop your new audio file here</p>
                    <p class="text-gray-400">or click to browse</p>
                  </div>
                  <%= form.file_field :audio_file, 
                                    accept: "audio/*", 
                                    class: "hidden",
                                    id: "audio-file-input",
                                    data: { upload_target: "fileInput" } %>
                  <button type="button" onclick="document.getElementById('audio-file-input').click()" 
                          class="px-6 py-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors">
                    Choose File
                  </button>
                </div>
                
                <!-- File Preview -->
                <div id="file-preview" class="hidden mt-4 p-4 bg-gray-700/50 rounded-lg">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                      <div class="text-2xl">üéµ</div>
                      <div class="text-left">
                        <p class="text-white font-medium" id="file-name"></p>
                        <p class="text-gray-400 text-sm" id="file-size"></p>
                      </div>
                    </div>
                    <button type="button" onclick="clearFileSelection()" 
                            class="text-red-400 hover:text-red-300 transition-colors">
                      ‚úï
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Audio Recording Section -->
            <div id="record-audio-section" class="upload-section hidden">
              <div class="border-2 border-gray-600 rounded-lg p-8 text-center">
                <div class="space-y-4">
                  <div class="text-4xl" id="recording-icon">üéôÔ∏è</div>
                  <div>
                    <p class="text-lg text-white font-medium" id="recording-status">Ready to Record</p>
                    <p class="text-gray-400" id="recording-time">00:00</p>
                  </div>
                  
                  <!-- Recording Controls -->
                  <div class="flex justify-center space-x-4">
                    <button type="button" id="start-recording" 
                            class="px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                      üéôÔ∏è Start Recording
                    </button>
                    <button type="button" id="stop-recording" 
                            class="hidden px-6 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors">
                      ‚èπÔ∏è Stop Recording
                    </button>
                    <button type="button" id="play-recording" 
                            class="hidden px-6 py-3 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors">
                      ‚ñ∂Ô∏è Play
                    </button>
                    <button type="button" id="clear-recording" 
                            class="hidden px-6 py-3 bg-orange-600 hover:bg-orange-700 text-white rounded-lg transition-colors">
                      üóëÔ∏è Clear
                    </button>
                  </div>
                  
                  <!-- Audio Playback -->
                  <audio id="recorded-audio" class="hidden w-full mt-4" controls></audio>
                </div>
              </div>
            </div>
          </div>

          <!-- Form Actions -->
          <div class="flex justify-between items-center pt-6 border-t border-gray-700">
            <%= link_to 'Cancel', league_league_membership_voice_clone_path(@league_membership.league, @league_membership, @voice_clone), 
                        class: 'px-6 py-3 text-gray-400 hover:text-white transition-colors' %>
            
            <div class="flex space-x-4">
              <% if @voice_clone.persisted? %>
                <%= link_to 'Delete Voice Clone', 
                            league_league_membership_voice_clone_path(@league_membership.league, @league_membership, @voice_clone),
                            method: :delete,
                            confirm: 'Are you sure? This will permanently delete the voice clone and cannot be undone.',
                            class: 'px-6 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors' %>
              <% end %>
              <%= form.submit 'Update Voice Sample', 
                              class: 'px-8 py-3 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed', 
                              id: 'submit-button',
                              disabled: true %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
// Include the same JavaScript from new.html.erb
// Tab switching functionality
document.addEventListener('DOMContentLoaded', function() {
  const fileUploadTab = document.getElementById('file-upload-tab');
  const recordAudioTab = document.getElementById('record-audio-tab');
  const fileUploadSection = document.getElementById('file-upload-section');
  const recordAudioSection = document.getElementById('record-audio-section');
  const submitButton = document.getElementById('submit-button');
  
  function switchTab(activeTab, activeSection, inactiveTab, inactiveSection) {
    activeTab.classList.add('active', 'bg-cyan-600', 'text-white');
    activeTab.classList.remove('text-gray-400');
    inactiveTab.classList.remove('active', 'bg-cyan-600', 'text-white');
    inactiveTab.classList.add('text-gray-400');
    
    activeSection.classList.remove('hidden');
    inactiveSection.classList.add('hidden');
    
    // Reset submit button
    submitButton.disabled = true;
  }
  
  fileUploadTab.addEventListener('click', () => {
    switchTab(fileUploadTab, fileUploadSection, recordAudioTab, recordAudioSection);
  });
  
  recordAudioTab.addEventListener('click', () => {
    switchTab(recordAudioTab, recordAudioSection, fileUploadTab, fileUploadSection);
  });
});

// File upload functionality
const fileInput = document.getElementById('audio-file-input');
const filePreview = document.getElementById('file-preview');
const fileName = document.getElementById('file-name');
const fileSize = document.getElementById('file-size');
const submitButton = document.getElementById('submit-button');
const dropZone = document.getElementById('file-drop-zone');

fileInput.addEventListener('change', handleFileSelect);
dropZone.addEventListener('dragover', handleDragOver);
dropZone.addEventListener('drop', handleDrop);
dropZone.addEventListener('click', () => fileInput.click());

function handleFileSelect(event) {
  const file = event.target.files[0];
  if (file) {
    displayFile(file);
  }
}

function handleDragOver(event) {
  event.preventDefault();
  dropZone.classList.add('border-cyan-500');
}

function handleDrop(event) {
  event.preventDefault();
  dropZone.classList.remove('border-cyan-500');
  const files = event.dataTransfer.files;
  if (files.length > 0) {
    fileInput.files = files;
    displayFile(files[0]);
  }
}

function displayFile(file) {
  fileName.textContent = file.name;
  fileSize.textContent = formatFileSize(file.size);
  filePreview.classList.remove('hidden');
  submitButton.disabled = false;
}

function clearFileSelection() {
  fileInput.value = '';
  filePreview.classList.add('hidden');
  submitButton.disabled = true;
}

function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Audio recording functionality
let mediaRecorder;
let recordedChunks = [];
let recordingStartTime;
let recordingInterval;

const startRecordingBtn = document.getElementById('start-recording');
const stopRecordingBtn = document.getElementById('stop-recording');
const playRecordingBtn = document.getElementById('play-recording');
const clearRecordingBtn = document.getElementById('clear-recording');
const recordedAudio = document.getElementById('recorded-audio');
const recordingStatus = document.getElementById('recording-status');
const recordingTime = document.getElementById('recording-time');
const recordingIcon = document.getElementById('recording-icon');

startRecordingBtn.addEventListener('click', startRecording);
stopRecordingBtn.addEventListener('click', stopRecording);
playRecordingBtn.addEventListener('click', playRecording);
clearRecordingBtn.addEventListener('click', clearRecording);

async function startRecording() {
  try {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    recordedChunks = [];
    
    mediaRecorder.ondataavailable = (event) => {
      if (event.data.size > 0) {
        recordedChunks.push(event.data);
      }
    };
    
    mediaRecorder.onstop = () => {
      const blob = new Blob(recordedChunks, { type: 'audio/webm' });
      const url = URL.createObjectURL(blob);
      recordedAudio.src = url;
      recordedAudio.classList.remove('hidden');
      
      // Create a file from the blob for form submission
      const file = new File([blob], 'recording.webm', { type: 'audio/webm' });
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(file);
      fileInput.files = dataTransfer.files;
      
      submitButton.disabled = false;
      playRecordingBtn.classList.remove('hidden');
      clearRecordingBtn.classList.remove('hidden');
    };
    
    mediaRecorder.start();
    recordingStartTime = Date.now();
    
    // Update UI
    startRecordingBtn.classList.add('hidden');
    stopRecordingBtn.classList.remove('hidden');
    recordingStatus.textContent = 'Recording...';
    recordingIcon.textContent = 'üî¥';
    
    // Start timer
    recordingInterval = setInterval(updateRecordingTime, 1000);
    
  } catch (error) {
    console.error('Error starting recording:', error);
    alert('Unable to access microphone. Please check your permissions.');
  }
}

function stopRecording() {
  if (mediaRecorder && mediaRecorder.state === 'recording') {
    mediaRecorder.stop();
    mediaRecorder.stream.getTracks().forEach(track => track.stop());
    
    // Update UI
    startRecordingBtn.classList.remove('hidden');
    stopRecordingBtn.classList.add('hidden');
    recordingStatus.textContent = 'Recording Complete';
    recordingIcon.textContent = '‚úÖ';
    
    // Stop timer
    clearInterval(recordingInterval);
  }
}

function playRecording() {
  recordedAudio.play();
}

function clearRecording() {
  recordedAudio.src = '';
  recordedAudio.classList.add('hidden');
  playRecordingBtn.classList.add('hidden');
  clearRecordingBtn.classList.add('hidden');
  recordingStatus.textContent = 'Ready to Record';
  recordingTime.textContent = '00:00';
  recordingIcon.textContent = 'üéôÔ∏è';
  fileInput.value = '';
  submitButton.disabled = true;
}

function updateRecordingTime() {
  const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
  const minutes = Math.floor(elapsed / 60);
  const seconds = elapsed % 60;
  recordingTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}
</script>

<style>
.tab-button.active {
  @apply bg-cyan-600 text-white;
}
.tab-button:not(.active) {
  @apply text-gray-400 hover:text-white;
}
</style>